---
###############################
## Check tmp dir            ###
###############################
    - name: Create tmp directory
      local_action:
        module: file 
        path: "{{ ravello_tmp_dir }}" 
        state: directory
      run_once: True
      tags: [ create ]

###############################
## Get Application ID       ###
###############################
    - name: Check if application exist
      local_action:
        module: ravello_get_id
        resource_name: "{{ ravello_app_name }}"
        resource_type: applications
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
      register: app
      run_once: true
      tags: [ create, doc ]

###############################
##  Create the application   ##
###############################
    - name: Create Vm Order Group ( if defined )
      set_fact:
        ravello_vm_order_groups_list: "{{ ravello_vm_order_groups_list }} + [ {'id': {{ item.value.id }}, 'order': {{ item.value.order }}, 'name': '{{ item.key }}', 'delay': {{ item.value.delay | default( ravello_vm_order_groups_default_delay )}} } ]"
      with_dict: "{{ ravello_vm_order_groups }}"
      tags: [ create, doc, test ]
      run_once: true

    - name: Create Application on Ravello (if not present)
      local_action:
        module: uri
        url: "https://cloud.ravellosystems.com/api/v1/applications"
        method: POST
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
        force_basic_auth: yes
        status_code: 201
        HEADER_Content-Type: 'application/json'
        HEADER_Accept: 'application/json'
        body:
          name: "{{ ravello_app_name }}"
          description: "{{ ravello_app_desc }}"
          design:
            vmOrderGroups: "{{ ravello_vm_order_groups_list }}"
        body_format: json
      register: newapp
      run_once: true
      changed_when: true
      when: app.found == False
      tags: [ create, doc ]

    - name: Set App ID variable
      set_fact:
        application_id: "{{ newapp.json.id }}"
      when: app.found == False
      tags: [ create, doc ]
      run_once: true

    - name: Set App ID variable
      set_fact:
        application_id: "{{ app.json.id }}"
      when: app.found == True
      tags: [ create, doc ]
      run_once: true

#####################################################
##  Create the documentation for the application   ##
#####################################################
    - name: Get Documentation for Application
      local_action:
        module: uri
        url: "https://cloud.ravellosystems.com/api/v1/applications/{{application_id}}/documentation"
        method: GET
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
        force_basic_auth: yes
        status_code: 404,200
        HEADER_Content-Type: 'application/json'
        HEADER_Accept: 'application/json'
      register: doc
      run_once: true
      when: ravello_app_documentation is defined
      tags: [ doc ]

    - name: Check if Documentation already exist
      set_fact:
        ravello_doc_method: POST
      when:
        - ravello_app_documentation is defined
        - doc.status == 404
      tags: [ doc ]
      run_once: true

    - name: Create Documentation for Application
      local_action:
        module: uri
        url: "https://cloud.ravellosystems.com/api/v1/applications/{{application_id}}/documentation"
        method: "{{ ravello_doc_method | default('PUT') }}"
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
        force_basic_auth: yes
        status_code: 200
        HEADER_Content-Type: 'application/json'
        HEADER_Accept: 'application/json'
        body:
          value: "{{ ravello_app_documentation }}"
        body_format: json
      run_once: true
      changed_when: true
      when:
        - ravello_app_documentation is defined
      tags: [ doc ]

## Check if VM already exist, connect info from Ravello
    - name: Get VM ID from Ravello
      local_action:
        module: ravello_get_id
        application_id: "{{ application_id }}"
        resource_name: "{{ inventory_hostname }}"
        resource_type: vms
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
      register: vm

    - name: Set VM ID variable
      set_fact:
        vm_id: "{{ vm.json.id }}"
      when: vm.found == True

    - name: Set VM DATA variable
      set_fact:
        vm_data: "{{ vm.json }}"
      when: vm.found == True

######################################
## Get baseVMid Number from Ravello
######################################
    - name: Get Image ID from Ravello
      local_action:
        module: ravello_get_id
        resource_name: "{{ ravello_image }}"
        resource_type: images
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
      register: image
      when: vm.found == False
      tags: [ create ]

######################################
## Get id for Keypair from Ravello
######################################
    - name: Get Key Pair ID from Ravello
      local_action:
        module: ravello_get_id
        resource_type: keypairs
        resource_name: "{{ ravello_key_pair }}"
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
      register: keypair
      when:
        - vm.found == False
        - ravello_key_pair is defined
      tags: [ create ]

#################################
## Add VMs to the application  ##
#################################
    - name: Add VM to Application
      local_action:
        module: ravello_addvm
        appId: "{{ application_id }}"
        baseVmId: "{{ image.json.baseVmId }}"
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
      register: newvm
      when: vm.found == False
      tags: [ create, fqdn ]

    - name: Set VM ID variable
      set_fact:
        vm_id: "{{ newvm.msg.id }}"
      when: vm.found == False

    - name: Set VM DATA variable
      set_fact:
        vm_data: "{{ newvm.msg }}"
      when: vm.found == False

#################################
##   Update Network Topology   ##
#################################
    - name: Render Template to Update VM
      local_action:
        module: template
        src: update_vm.json.j2
        dest: "{{ ravello_tmp_dir }}/update_{{ inventory_hostname }}_vm.json"
      when: ravello_topology[inventory_hostname] is defined
      tags: [ create ]

    - name: Update VM in Application
      local_action:
        module: uri
        url: "https://cloud.ravellosystems.com/api/v1/applications/{{ application_id }}/vms/{{ vm_id }}"
        method: PUT
        user: "{{ ravello_login_username }}"
        password: "{{ ravello_login_password }}"
        force_basic_auth: yes
        status_code: 200
        HEADER_Content-Type: 'application/json'
        HEADER_Accept: 'application/json'
        body: "{{ lookup('file' , '{{ ravello_tmp_dir }}/update_{{ inventory_hostname }}_vm.json') }}"
        body_format: json
      when: ravello_topology[inventory_hostname] is defined
      changed_when: true
      tags: [ create ]
